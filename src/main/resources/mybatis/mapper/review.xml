<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.skkcandle.dao.ReviewDao">
	<!-- <insert id="insert" parameterType="Review">
		insert into review (reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent)
		values(#{reviewId}, #{productId}, #{userId}, #{reviewTitle}, sysdate, 0, #{reviewContent})
	</insert> -->
	
	<select id="selectReview" parameterType="int" resultType="Review">
		select reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent
		from review
		where productId = #{productId}
	</select>
	
	<select id="selectReviewByUserId" parameterType="int" resultType="Review">
		select reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent
		from review
		where userId = #{userId} order by reviewId desc
	</select>
	<!-- 
	<select id="count" resultType="int">
		select count(*) from review
		where productId = #{productId}	
	</select>
	 -->
	   <!-- reusltType 조회 결과 값을 저장하기 위한 데이터 타입, parameterType : 전달받은 파라미터 데이터 타입 지정 -->
  <select id="selectByPage" parameterType="Pager" resultType="Review"> <!--resultType =(무슨 타입으로 내보내고 싶다), select 된 값을 반환할 빈 그릇 -->
	  <![CDATA[
	  select rnum, reviewId, userId, reviewTitle, reviewDate, ratingScore, reviewContent
	      from (
	         select rownum as rnum, reviewId, reviewTitle, userId, reviewDate, ratingScore, reviewContent
	         from (
	            select reviewId, reviewTitle, userId, reviewDate, ratingScore, reviewContent
	            from review
	            order by reviewId desc
	         )
	         where rownum <= #{endRowNo}
	      )
	      where rnum >= #{startRowNo}
	      ]]>
   </select>
   
    <select id="countReview" resultType="int"> <!-- 아이디 하고 메소드 이름하고 똑같아야 한다. -->
    	select count(*) from review
		where productId = #{productId}	
    </select>
    <!-- 리뷰 작성하기  -->
    <insert id="insertReview" parameterType="Review">
    	<selectKey keyProperty="reviewId" resultType="int" order="BEFORE"> 
			select review_seq.nextval from dual
		</selectKey>
		insert into review (reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent)
		values(#{reviewId},#{productId},#{userId},#{reviewTitle},sysdate,#{ratingScore},#{reviewContent})
    </insert>
    <!-- 리뷰 삭제하기 -->
    <delete id="deleteReview" parameterType="int">
    	delete from review where reviewId = #{reviewId}
    </delete>
    <!-- 리뷰 수정하기위해 reviewId 로 정보 가져오기 -->
    <select id="getReviewInfo" parameterType="int" resultType="Review">
    	select * from review where reviewId = #{reviewId}
    </select>
    <!-- 리뷰 수정시 -->
    <update id="updateReview" parameterType="Review">
    	update review set 
    	reviewTitle = #{reviewTitle}, reviewDate = sysdate, ratingScore =#{ratingScore}, reviewContent = #{reviewContent} 
    	where reviewId=#{reviewId}
    </update>
    
    <!-- 리뷰 페이징을 위해 총 리뷰수를 가져오자  -->
    <select id="reviewNum" parameterType="int" resultType="int">
    	select count(*) from review where userId=#{userId}
    </select>
    
    <!-- 리뷰 페이징을 위해  정보를 받아오자 -->
	<select id="reviewPaging" parameterType="Pager" resultType="Review">
		<![CDATA[
			SELECT rnum, reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent 
			FROM ( SELECT rownum rnum, reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent 
			    FROM ( SELECT reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent 
			        FROM review WHERE USERID = #{userId} ORDER BY reviewId DESC ) 
			    WHERE ROWNUM <=#{endRowNo} ) 
			WHERE rnum >=#{startRowNo} 
		]]>
	</select>
	
	<!-- 제품 상세 페이지에서 리뷰 회원의 정보들을 가져오자 -->
	<select id="getListReview" parameterType="Pager" resultType="Review"> <!-- cart.xml 결과가 여러개 나와도 parameterType 은 int 이다.(cart를 select 해오는데 필요한 xml) -->
		<![CDATA[
			SELECT rnum, reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent 
			FROM ( SELECT rownum rnum, reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent 
			    FROM ( SELECT reviewId, productId, userId, reviewTitle, reviewDate, ratingScore, reviewContent 
			        FROM review WHERE productId = #{productId} ORDER BY reviewId DESC ) 
			    WHERE ROWNUM <=#{endRowNo} ) 
			WHERE rnum >=#{startRowNo} 
		]]>
	</select>
    
	
</mapper> <!-- 리뷰 작업으로 인한 주석처리 -->




